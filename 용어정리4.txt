for문 : (while 이랑 호환됨)  :이유?  : 남들이 쓰기 때문(남이 짠 코드를 읽을수 있어야함)
	:용도가 다름 ()  //while: 수직적으로 구조가 잡힘  중첩이 올경우 가독성 떨어짐(난전일때 어려움) : 단일 루프
for문 수평적으로 위치 가독성이 좋음 난전에 강함 : 복잡 루프  : 변형 for문 가능 
for :
 1 초기문 먼저 실행 ;(구분)// 2 조건문 (T/F)// 3 (T) 실행문 ,(F) 탈출
4 (T) 증감문 // 5  조건문 (234 234)
========
제어문  흐름제어(반복문에 종속성)
break(깨다,부수다)[반복문 정지]
반복문이 실행되고 있는 시점에서 가장 근접한 반복문(루프) 탈출
여러 개의 루프가 중첩된 경우 현재 위치한 루프 하나만 탈출
---
continue 
반복도중 처리를 중단하고 반복문의 시작 위치로 이동
정밀한 제어 구조를 만들 때 사용
안에 있는 실행문을 패스하되 for  빠져 나가지는 않음


컨티뉴; 
실행문 <- 여기 생략하고
 [o] <- 여기 위치로
}  
---
대부분 프로그램은 무한루프가 돌고 있다.  무한루프 돌리는 값:
for( ; ; ){  실행문;   }
while(true){  실행문;   } // 일반적으로 많이 사용함.
-------------
Switch : 남들이 다 쓰니까  // 해쉬 알고리즘 // 성능상 장점 /분기점이 많아졌을때//(상황에 따른 제약사항)
switch(변수[(int,char) ])값 // 선택분기문
case ():(사건,변수,경우의 수) //세미콜론 :
break 있어야 각각의 실행가능  
default=else :


