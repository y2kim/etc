---Web Programing---
기본적으로 통신이라는 개념이 깔려있다 
PC 1대 이상    최소한 2대이상의 프로그램을 작성

-- 웹 프론트 엔드 ---    --- 백 엔드 ----

팀 구성   
web Developer - 서버에서 처리해주는 사람  - 백엔트 파트   
PHP (역사깊고 사람이 많음 ),ASP, JSP 
web publisher - 프론트 엔드 파트 ,{틀}
web disiger - 웹디자이너 (배너, 그림 같은)
팀에서 1~2명은 DBA가 있음 

프론트 엔드 - 핵심 언어 - HTML(기본틀 ),JS(기능,동작),CSS(디자인)

H hyper
T text
M markup
L language

X extends
M markup
L language

markup :  데이터 구조 방법 / 선형구조 초월 /데이터를 표현하는 언어 


HTML5  (고유)
-손쉽게 멀티미디어 탑재에 별다른 플러긍니 설치가 필요없다
-구조적 설계 지원 (Semantic : 접근성 향상 )   
-------------------------------(공통)
-모바일 웹 지원
- css / java script
Element(요소) :  예약어 (미리정해셔 있는 구성요소 하나하나를 통칭하는 용어)
tag : Element에 <> 붙여 기능을 가지는 문법으로 사용
property : 태그에 부여되는 옵션 또는 속성 정보 
value : property에 할당되는 값 

http : 웹 사용되는 규칙 
DNS : 아이피 주소를 일일이 기억하기 힘드니 도메인 이름을 쳤을때 연결해주는


#대/소 구분없음
#태그로 코드를 짜게됨  
#시작태그+/종료태그 

 <!-- CSS (Cascading Style Sheet) FrontEnd -->
    <!--CSS 선택자 / CSS Property      --> 
html + css 같이 쓰이기 때문에 가독성이 떨어짐

CSS 선택자 : 어떤 컴포넌트 지정하는것 
 CSS Property : 어떻게 꾸미겠다는것

------------------------------------------------
CSS part

3가지의 방법
External Style Sheet
Internal Style Sheet
Inline Style Sheet

External Style Sheet 
: 라이브러리 같은 형식 , 대규모 프로젝트 생성시 

header {(외부파일임)
    background-color: brown;
    color: beige
}


Internal Style Sheet 
 : 한페이지 내에서 처리할때
<head>
    <style>
        div (선택자){
            background-color: navy;
            color: white;
        }
    </style>
    <!--  Internal Style Sheet  head에서 생성하고  어디에 적용할건지 부터 목적지를 선언해야함  ; 필수-->
</head>

Inline Style Sheet
: 한라인 안에 쓰이고  body 태그 안에 씌여진다

<body>
    <!-- CSS (Cascading Style Sheet) FrontEnd -->
    <!--CSS 선택자 / CSS Property      -->
    <p style="color: darkkhaki;background-color: aquamarine">Hello css</p>
    <!-- Inline Style Sheet  방식   ; 구분지어서 기능을 추가가능-->
</body>


똑같은 지정자가 생길때  우선순위가 적용이 된다   
 : Inline 가장 쎄다  ,  Extanal이 약하다   똑같은 지정자여도  inline이 있으면 inline이 우선순위를 둔다
inline > internal> external 

class 와 ID 

       /* 전체 선택자
        * {
              CSS 주석방식이 다름 
             color: red;       
        }*/

        /*      태그선택자  */

        /*
 h4 { background-color: pink; }
*/

        /*   id 선택자   #을 붙여줘야 함  class . 를 붙여줘야 함  */

        #p1 {
            color: aquamarine
        }

        #p2 {
            color: skyblue
        }

        .c1 {
            background-color: beige
        }
    </style>
---------
  <!--  id 각자의 고유의 스타일 -->
    <!--  클래스  중복을 허용하는 이름  같은 클래스끼리 같은 스타일을 씌우고 싶을때  . -->
    <p id="p1" class="c1">test1 StyleSheet 연습</p>
    <p id="p2" class="c1">test2 StyleSheet 연습</p>
    <h4>test3 StyleSheet 연습</h4>


    <style>
        p[name="n2"] {
            /*   p[name] : name property 가지고 있는 객체 포함   */
            color: orangered;
        }

        p[myProp] {
            color: aqua;
            background-color: darkgray;
        }
    </style>
</head>

<body>
    <p myProp>내 임의 속성</p>
    <p name="n1" id="i1" class="c1"> Test1 - 속성 선택자</p>
    <p name="n2" id="i2" class="c1"> Test2 - 속성 선택자</p>
    <p myProp="n3" id="i3" class="c1"> Test3 - 속성 선택자</p>

--------------------------

  /*    문자열 속성 선택자    */
-----------------------


        /*(틸드)~: 띄어쓰기로 구분되어지는 문자열 포함 검색*/

        p[name~="Test"] {
            /*   p[name~="Test"] 순수 독힙적인 Test 문자를 포함 (띄어쓰기관련)  */
            color: red;
        }

        /*   pipeline(|) : (하이픈)- 으로 구분되어지면서 시작되는 위치에 있는 문자열 포함을 검색    */

        p[class|="class"] {
            /*- 기준으로 나뉘기 때문에 1번째만 잡힌다*/
            background-color: aquamarine
        }

      p[id^="id"] {
            /* ^ Circumplex::startwith 기능 : 지정된 속성안에서 문자열로 시작하는 속성을 검색 */
            color: red;
        }

        p[id$="d4"] {
            /* $ Dollor :: 지정된 속성안에서 문자열로 끝나는 대상을 검색 */
            background-color: aqua;
        }

 p[id*="d"] {
            /* *  :: 해장 문자열이 포함되는것을 검색 */
            font-family: cursive
        }

    <!--   자손 선택자 후손 선택자-->
    <!--parent-->
    <div>
        <!--자손-->
        <h1></h1>
        <h2></h2>
        <ul>
            <!--후손-->
            <li></li>
            <li></li>
        </ul>
    </div>

-----------------------------------------
<style>
       div li {
            /* 후손 선택자 : 내 아래 밑에있는 모든것 */
            color: red;
        }

        div>h4 {
            /* 자손도 후손 이다 내 한단계 밑에 있는것들만 */
            /* > 꺽새를 넣으면 자손선택자가 된다 */
            color: blue;
        }

    div>ul>h4 {
 /*후손도 마찬가지  */
            color: brown;
        }

div ul h4{
            background-color: antiquewhite
        }


    <!--   자손 선택자 후손 선택자-->
    <!--parent-->
    <div id="div-test">
        <!--자손-->
        <h4>자손1</h4>
        <h4>자손2</h4>
        <ul>
            <h4>Test</h4>
            <!--후손-->
            <li>UL 태그의 자손이면서 div 태그의 후손</li>
            <li>UL 태그의 자손이면서 div 태그의 후손</li>
        </ul>
    </div>

-----------------------
동의선택자 :  형제element

    <style>
        /* 동의 선택자  */

        h4+h5 {
            /* +: h4 바로 뒤에 있는 요소  형제 하나만을 선택할때  */
            color: red;
        }

        h5+p {
            /* +: h4 바로 뒤에 있는 요소  형제 하나만을 선택할때  */
            color: brown;
        }

        h4~p {
            /* ~: 해당으로 부터 뒷쪽으로 전부  h4,h5 상관없음 */
            background-color: azure
        }
    </style>
</head>

<body>
    <!--동의선택자 : 형제관계-->
    <div>
        <h4>자손1</h4>
        <h5>자손2</h5>
        <p>자손3</p>
        <p>자손4</p>
        <!--여기있는것들은 동의관계-->
    </div>


----------------------
반응선택자 (가상선택자)

 <!--반응선택자(가상선택자)-->
    <style>
        /* p태그 에서 상황  //hover : 마우스가 올라갔을때*/

        p:hover {
            background-color: aqua;
            cursor: pointer;
        }

        p:active {
            color: red;
        }
</style>
----------------------
<!--상태 선택자-->  input 안성맞춤

<style>
        input:focus {
            background-color: pink;
        }

        /* focus : 깜빡거리는 텍스트 형태에서 */

        input:checked {
            height: 100px;
            width: 100px;
        }
    </style>
</head>


 <!--  구조 선택자 : 형제 관계에 태그 중에서 n번째 태그를 선택-->

 <style>
        /*
        div p:first-child {
            color: red;
        }

        div p:last-child {
            color: blue;
        }

        div p:nth-child(2) {
            /* 몇번째 한테 줄건지  나중에 쓰는게 적용된다 , 처음이랑 마지막에 쓸수 있음 */

        /*  color: green;
        }

        div p:nth-last-child(3) {
            background-color: aqua
            /*  역순 방향으로 index가 설정된다 */

        /*        }*/

        /*배수 표시*/

        div p:nth-child(2n +1) {
            color: red;
        }

        div p:nth-child(2n +1),
        h4:nth-child(2n+1) {
            /* , 로 구분 지을수 있다*/
            background-color: aqua
        }

        p,
        h4 {
            font-style: oblique;
        }
    </style>
</head>

<body>

    <div>
        <p>구조 선택자 01</p>
        <p>구조 선택자 02</p>
        <h4> 다른 태그 </h4>
        <p>구조 선택자 03</p>
        <p>구조 선택자 04</p>
        <p>구조 선택자 05</p>
        <h2> 또 다른 태그</h2>
        <p>구조 선택자 06</p>
        <p>구조 선택자 07</p>
        <p>구조 선택자 08</p>
        <p>구조 선택자 09</p>
        <p>구조 선택자 10</p>
    </div>

</body>


<!--   형태 구조 선택자 (type 기반)-->--------

 <style>
        div p:first-of-type {
            color: blue;
        }

        div h4:first-of-type {
            color: red;
        }

        div p:last-of-type {
            background-color: pink;
        }

        div h4:last-of-type {
            background-color: pink;
        }

        div p:nth-of-type(2) {
            background-color: green;
        }
    </style>

  <div>
        <p>테스트1</p>
        <h4>테스트1</h4>
        <p>테스트2</p>
        <h4>테스트2</h4>
        <p>테스트3</p>
        <h4> 테스트3</h4>
        <p>테스트4</p>
        <h4>테스트4</h4>
    </div>

--------------링크 관련
    <style>
        /*방문한적 없는 사이트에 한하여        */

        a:link {
            color: violet;
            text-decoration: none;

        }

        a:visited {
            color: blue;
            text-decoration: none;
        }
    </style>
 <a href="https://www.naver.com/">게이바로 가기</a> <br>
    <a href="https://www.daum.net/">뒤쳐진 가기</a> <br>

_____________________문자선택자

   <style>
        p {
            font-size: 25px;
        }

        #p1::first-letter {
            font-size: 50px;
        }

        #p2::first-line {
            background-color: brown;
        }

        #p3::before {
            content: "이전공간 히오스 ";
            /*문자열의 이전   */
        }

        #p4::after {
            content: " after 공간";
            /*문자열 다음 공간 */
        }

        #p4::selection {
            color: red;
            /*드래그 하는순간 */
        }
    </style>



  <p id="p1">첫 번째 문자열</p><br>
    <p id="p2">두 번째 문자열 <br> 여기가 두번째 줄</p>
    <p id="p3">세 번째 문자열</p><br>
    <p id="p4">네 번째 문자열</p><br>


-----------------------부정 선택자
    <meta charset="UTF-8">
    <title>Document</title>
    <!--부정 선택자-->
    <style>
        p:not(#p1) {
            color: red;
        }
    </style>
</head>

<body>
    <!-- p#p}{p태그$}*3-->
    <p id="p1">p태그1</p>
    <p id="p2">p태그2</p>
    <p id="p3">p태그3</p>
</body>
-------------------------------------------
우선순위

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Document</title>

    <style>
        #id1 {
            background-color: pink;
        }


        .c1 {
            background-color: blue;
        }

        p {
            background-color: aqua !important;
        }
    </style>
    <!--  !inportant(반드시) > inline SS >id> class > p 우선순위-->
</head>

<body>
    <p id="id1" class="c1" style="background-color: brown">Test</p>
</body>
</html>

---------------------------------------------------------
box model

margin : 컴포넌트 와 컴포넌트의 간격  
border : 컴포넌트 크기
padding : content와 border 사이의 영역
content : 내용


div {
            border: 1px dotted black;
            width: 100px;
            height: 100px;
box-sizing: border-box;
        }  


/* content box: border, padding 값을 width 속성값과 별개로 보는 방식*/
/* border-box : border, padding 값을 width 속성값에 포함시키는 방식*/

/*시계방향 ↑ → ↓ ←     하나만 쓰면 4개 방향으로 적용   2개 쓰면 위아래  왼쪽오른쪽  3개 쓰면 위 왼쪽오른쪽  아래쪽*/
-- padding margin  공통사항
/*margin : auto :: 페이지 크기 기준으로 중앙으로 바뀜  위 아래에는 적용되지 않음*/


 <!--Css Position-->
위치를 잡는 방식 

   /*static:normal flow(뚝뚝떨어지는것 처럼), relative:static 기반(static 였을때 자기가 있었을곳 기준) 위치 변경 가능*/

        /*덮어쓰기,우선순위가 생기는데 zindex로 조절할수 있다 */

<!--position : static(defaulte)/relative/absolute/fixed-->

<!--position absolute-->
    <!--relative 가 static 이였을때 위치를 기준으로 좌표를 지정한다면
    absolute는 static이 아닌 포지션을 가진 parent의 0,0 으로부터 좌표를 지정한다 static 무시하고
    [static 이 아닌 parent를 만날때까지 추척하며] 끝까지 static이 아닌 parent를 만나지 못한다면 body 기준으로 좌표를 지정한다-->

 <style>
        div {
            border: 1px dotted black;
            width: 100px;
            height: 100px;
        }

        #d1 {
            position: absolute;
            right: 0px;
            /*오른쪽으로 XX 만큼 떨어지겠다*/
            background-color: yellow;
        }

        #d2 {
            background-color: darkseagreen;
        }

        #d3 {
            background-color: crimson;
        }

        #wrapper {
            position: absolute;
            width: 300px;
            height: 500px;
        }
    </style>
    <!--absolute>(static,relative) 우선순위-->

/*   fixed : 광고,메뉴 마냥 따라다니는 놈  */

    <!--display : block/inline/inline-block-->

    <style>
        div {
            display: inline-block;
            border: 1px solid black;
            width: 200px;
        }

        span {
            display: block;
            border: 1px solid red;
            width: 200px;
            /* inline 은 사이즈 증감이 불가 */
        }
    </style>
</head>

<body>
    <!--display : block/inline/inline-block-->
    <div id="d1">Test Block</div>
    <div id="d2">Test Block2</div>
    <!--div 한줄 차지  -->
    <span id="s1">Test Inline</span>
    <span id="s2">Test Inline2</span>
    <!--여러개 가능-->
    <!--기본으로는 div:block  span:inline 성능을 가지고 있다 -->
    <!--inline-block:기능 합함  , block : 한줄차지 크기 조정 , inline: 옆에다가 사용가능하나 크기변경불가-->
------------------------------------------
overflow : 넘쳐흐를때 어떻게 처리할것인가에 대한 메소드
(y,x 방향 조절 가능)
----------------------------------------------
정면을 보는데  겹쳐보이는 것   2중이상 보이는것 :  viewport

-------------------------------------------------------
애니메이션 효과 



opacity : 투명도
#side:hover #title {} <- 상위 엘레먼트는 통제못함   동일,하위 엘레먼트는 통제가능
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<java script>>>>>>>>>>>>>>>>>>>>>>>>>>
ecm-> java script  
자바스크립트  
- 동적 언어로서 정적 기능만을 가진 html을 지원하기 위해 등장했다.
- 명시적 자료형이 없거나 콜백함수패턴 또는 명시적 변수선언이 없는 등 특이한 문법을 보유하고 있다

JQuery
- 자바스크립트 코드가 길어지고 가독성이 떨어지는 등의 문제를 개선하기 위해 등장한 javascript 라이브러리 


자바스크립트 문법 적용 방식 
-inline javaScript
-internal javaScript
-External JavaScript

자바스크립트도 여타 언어처럼 기본적으로 내장 라이브러리를 가진다(IN 브라우저(크롬,IE))
- window(이미 new 됨) 최상위 객체 밑으로 BOM(browser object model) ,DOM(document object model)을 가진다 // bom dom ; 객체의 집합
dom : 문서  자체 관련된 내용  , 객체 처럼 사용할수 있는 라이브러리   (html-js  를 연결하는 접정 역활 API)
bom : (브라우저 - js  요소를 연결하는 접점 역활 API)
function = method  

TEXT 메모리 영역  - 코드영역 

innerHTML : HTML 에 존재하는 태그들의 시작태그와 종료태그 사이 영역


