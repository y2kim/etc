// 이후 모니터에서 램으로 : 사용자가 쉽게 이용할수 있게
예외전가 (에라 나도 모르겠다.) : 자바 언어 특성상 안정성을 중시함 (ex:try ~ catch(예외처리) , execption(전가) , ) 예외처리와 비슷하나 좀 다름
// system.in.read  : 잘 사용안하지만 원리 내포됨 
: 시스템으로 부터 집어넣음 ,  
입력 Buffer 로부터 DAta를 아스키 코드 만큼 입력 받음

int 형으로 입력 받으므로 적절한 형 변환이 필요함
=그대로 치면 하단의 에러 뜸=
//Unhandled(조정) exception(예외) type IOException : 예외가 조작되지 않음 -> [미리 경고 에러](자바의 도움)
throws Exception (예외 던짐[전가])
[system.out : ] 
 system.in.read : 키보드로 부터 한글자을 입력 받는거 : 단일문자 
입력 Buffer : CPU 관련 최적화 관련 [EX:short cut](스케츌링) : 일거리에 우선순위가 있음 [사용자 편리가 우선순위] 
:: 우선순위 변경(io interrupte)[cpu 잠시정지됨] -> 순위 변경하면서 다시 CPU 재 동작 <> 재배정 하기위한 시간 소요 .스케줄링. 오버헤드 완화 할려는 방식
버퍼 : 충격완화장치   RAM 일부분 공간 : 일부분 공간을 사용하여 전부 인터럽트를 걸지 않고 나머지 일부분 RAM 인너럽트를 발생시켜 효율적으로 작동시킬려고 하는이유  // [[그러므로 우리는 정보처리기사를 공부합시다.]]

============================================================================

Scanner // 버퍼로 부터 한 줄을 가져옴  \r\n 까지 다 가져옴 :: 버퍼 내용 다 가져옴  :: String 형 변수
// JOptionPane.showInputDialog : 그래픽

=======================================================
제어문 :::: 여러종류의 흐름 
if : 만약에  [조건문,분기문]
if(조건문)
{
	실행문들;
}
조건문 : 결과가 TRUE/False 결정시켜야함 
False : if 영역을 건너 뜀
True : 실행

======================================================
while : 사용자가 원하는 만큼 명령들을 여러 번 실행하는 제어구조 ,특정 조건이 만족되는 동안 명령을 계속적으로 실행한다.(반복)
식이 참일 경우에만 루프 처리를 반복한다
